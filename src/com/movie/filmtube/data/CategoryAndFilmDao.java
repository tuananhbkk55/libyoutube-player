package com.movie.filmtube.data;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table CATEGORY_AND_FILM.
 */
public class CategoryAndFilmDao extends AbstractDao<CategoryAndFilm, Long> {

	public static final String TABLENAME = "CATEGORY_AND_FILM";

	/**
	 * Properties of entity CategoryAndFilm.<br/>
	 * Can be used for QueryBuilder and for referencing column names.
	 */
	public static class Properties {
		public final static Property Id = new Property(0, Long.class, "id",
				true, "_id");
		public final static Property CategoryId = new Property(1, Long.class,
				"categoryId", false, "CATEGORY_ID");
		public final static Property FilmId = new Property(2, Long.class,
				"filmId", false, "FILM_ID");
	};

	public CategoryAndFilmDao(DaoConfig config) {
		super(config);
	}

	public CategoryAndFilmDao(DaoConfig config, DaoSession daoSession) {
		super(config, daoSession);
	}

	/** Creates the underlying database table. */
	public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
		String constraint = ifNotExists ? "IF NOT EXISTS " : "";
		db.execSQL("CREATE TABLE " + constraint + "'CATEGORY_AND_FILM' (" + //
				"'_id' INTEGER PRIMARY KEY ," + // 0: id
				"'CATEGORY_ID' INTEGER," + // 1: categoryId
				"'FILM_ID' INTEGER);"); // 2: filmId
	}

	/** Drops the underlying database table. */
	public static void dropTable(SQLiteDatabase db, boolean ifExists) {
		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "")
				+ "'CATEGORY_AND_FILM'";
		db.execSQL(sql);
	}

	/** @inheritdoc */
	@Override
	protected void bindValues(SQLiteStatement stmt, CategoryAndFilm entity) {
		stmt.clearBindings();

		Long id = entity.getId();
		if (id != null) {
			stmt.bindLong(1, id);
		}

		Long categoryId = entity.getCategoryId();
		if (categoryId != null) {
			stmt.bindLong(2, categoryId);
		}

		Long filmId = entity.getFilmId();
		if (filmId != null) {
			stmt.bindLong(3, filmId);
		}
	}

	/** @inheritdoc */
	@Override
	public Long readKey(Cursor cursor, int offset) {
		return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
	}

	/** @inheritdoc */
	@Override
	public CategoryAndFilm readEntity(Cursor cursor, int offset) {
		CategoryAndFilm entity = new CategoryAndFilm( //
				cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
				cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // categoryId
				cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2) // filmId
		);
		return entity;
	}

	/** @inheritdoc */
	@Override
	public void readEntity(Cursor cursor, CategoryAndFilm entity, int offset) {
		entity.setId(cursor.isNull(offset + 0) ? null : cursor
				.getLong(offset + 0));
		entity.setCategoryId(cursor.isNull(offset + 1) ? null : cursor
				.getLong(offset + 1));
		entity.setFilmId(cursor.isNull(offset + 2) ? null : cursor
				.getLong(offset + 2));
	}

	/** @inheritdoc */
	@Override
	protected Long updateKeyAfterInsert(CategoryAndFilm entity, long rowId) {
		entity.setId(rowId);
		return rowId;
	}

	/** @inheritdoc */
	@Override
	public Long getKey(CategoryAndFilm entity) {
		if (entity != null) {
			return entity.getId();
		} else {
			return null;
		}
	}

	/** @inheritdoc */
	@Override
	protected boolean isEntityUpdateable() {
		return true;
	}

}
