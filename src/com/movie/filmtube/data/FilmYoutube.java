package com.movie.filmtube.data;

import java.math.BigInteger;
import java.util.List;

import android.os.Parcel;
import android.os.Parcelable;

import com.google.gson.annotations.SerializedName;
import com.movie.filmtube.utils.DownloadStatus;
import com.movie.filmtube.utils.ServiceConfig;
import com.movie.filmtube.utils.movie.world.helper.MovieComment;
import com.youtube.bigbang.BuildConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table FILM_YOUTUBE.
 */
/**
 * @author kingfisher
 * 
 */
public class FilmYoutube implements Parcelable {

	private Long id;
	@SerializedName(ServiceConfig.TAG_VIDEO_ID)
	private String youtubeId;
	@SerializedName("FilmId")
	private Long serverId = -1l;
	@SerializedName(ServiceConfig.TAG_NAME)
	private String name = "";
	private String streamingUrlHQ = "";
	private String streamingUrlMedium = "";
	private String information = "";
	private Boolean isBookmarked = false;
	private Boolean isLocalFilm = false;
	private Long lastPlayedTime = 0l;
	private Integer downloadStatus = DownloadStatus.NOT_DOWNLOADED;
	private Integer fileSizeInMB = 0;

	// ======= Not saved in datbase //
	private BigInteger viewCount;
	private BigInteger likeCount;
	private BigInteger dislikeCount;

	private List<CategoryAndFilm> categoryAndFilms;
	private List<MovieComment> comments;

	// ======= End not saved in datbase

	public FilmYoutube() {
	}

	public FilmYoutube(Long id) {
		this.id = id;
	}

	public FilmYoutube(Long id, String youtubeId, Long serverId, String name,
			String streamingUrlHQ, String streamingUrlMedium,
			String information, Boolean isBookmarked, Boolean isLocalFilm,
			Long lastPlayedTime, Integer downloadStatus, Integer fileSizeInMB) {
		this.id = id;
		this.youtubeId = youtubeId;
		this.serverId = serverId;
		this.name = name;
		this.streamingUrlHQ = streamingUrlHQ;
		this.streamingUrlMedium = streamingUrlMedium;
		this.information = information;
		this.isBookmarked = isBookmarked;
		this.isLocalFilm = isLocalFilm;
		this.lastPlayedTime = lastPlayedTime;
		this.downloadStatus = downloadStatus;
		this.fileSizeInMB = fileSizeInMB;
	}

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public String getYoutubeId() {
		return youtubeId;
	}

	public void setYoutubeId(String youtubeId) {
		this.youtubeId = youtubeId;
	}

	public Long getServerId() {
		return serverId;
	}

	public void setServerId(Long serverId) {
		this.serverId = serverId;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getStreamingUrlHQ() {
		return streamingUrlHQ;
	}

	public void setStreamingUrlHQ(String streamingUrlHQ) {
		this.streamingUrlHQ = streamingUrlHQ;
	}

	public String getStreamingUrlMedium() {
		return streamingUrlMedium;
	}

	public void setStreamingUrlMedium(String streamingUrlMedium) {
		this.streamingUrlMedium = streamingUrlMedium;
	}

	public String getInformation() {
		return information;
	}

	public void setInformation(String information) {
		this.information = information;
	}

	public Boolean getIsBookmarked() {
		return isBookmarked;
	}

	public void setIsBookmarked(Boolean isBookmarked) {
		this.isBookmarked = isBookmarked;
	}

	public Long getLastPlayedTime() {
		return lastPlayedTime;
	}

	public void setLastPlayedTime(Long lastPlayedTime) {
		this.lastPlayedTime = lastPlayedTime;
	}

	public Integer getDownloadStatus() {
		return downloadStatus;
	}

	public void setDownloadStatus(Integer downloadStatus) {
		this.downloadStatus = downloadStatus;
	}

	public Boolean getIsLocalFilm() {
		return isLocalFilm;
	}

	public void setIsLocalFilm(Boolean isLocalFilm) {
		this.isLocalFilm = isLocalFilm;
	}

	public Integer getFileSizeInMB() {
		return fileSizeInMB;
	}

	public void setFileSizeInMB(Integer fileSizeInMB) {
		this.fileSizeInMB = fileSizeInMB;
	}

	@Override
	public int describeContents() {
		return 0;
	}

	@Override
	public void writeToParcel(Parcel dest, int flags) {
		try {
			// dest.writeLong(id);
			dest.writeString(youtubeId);
			dest.writeLong(serverId);
			dest.writeString(name);
			dest.writeString(streamingUrlHQ);
			dest.writeString(streamingUrlMedium);
			dest.writeString(information);
			dest.writeByte((byte) (isBookmarked ? 1 : 0));
			dest.writeByte((byte) (isLocalFilm ? 1 : 0));
			dest.writeLong(lastPlayedTime);
			dest.writeInt(downloadStatus.intValue());
			dest.writeInt(fileSizeInMB.intValue());
		} catch (NullPointerException exception) {
			if (BuildConfig.DEBUG) {
				exception.printStackTrace();
			}
		}
	}

	private FilmYoutube(Parcel in) {
		try {
			// id = in.readLong();
			youtubeId = in.readString();
			serverId = in.readLong();
			name = in.readString();
			streamingUrlHQ = in.readString();
			streamingUrlMedium = in.readString();
			information = in.readString();
			isBookmarked = in.readByte() != 0;
			isLocalFilm = in.readByte() != 0;
			lastPlayedTime = in.readLong();
			downloadStatus = in.readInt();
			fileSizeInMB = in.readInt();
		} catch (NullPointerException exception) {
			if (BuildConfig.DEBUG) {
				exception.printStackTrace();
			}
		}
	}

	public static final Parcelable.Creator<FilmYoutube> CREATOR = new Parcelable.Creator<FilmYoutube>() {
		public FilmYoutube createFromParcel(Parcel in) {
			return new FilmYoutube(in);
		}

		public FilmYoutube[] newArray(int size) {
			return new FilmYoutube[size];
		}
	};

	/**
	 * Get thumbnail link.
	 * 
	 * @return thumnail of youtube link.
	 */
	public String getThumbnailUrl() {
		return "http://img.youtube.com/vi/" + youtubeId + "/default.jpg";
	}

	public BigInteger getViewCount() {
		return viewCount;
	}

	public void setViewCount(BigInteger viewCount) {
		this.viewCount = viewCount;
	}

	public BigInteger getLikeCount() {
		return likeCount;
	}

	public void setLikeCount(BigInteger likeCount) {
		this.likeCount = likeCount;
	}

	public BigInteger getDislikeCount() {
		return dislikeCount;
	}

	public void setDislikeCount(BigInteger dislikeCount) {
		this.dislikeCount = dislikeCount;
	}

	@Override
	public String toString() {
		return "FilmYoutube [id=" + id + ", youtubeId=" + youtubeId
				+ ", categoryId=" + serverId + ", name=" + name
				+ ", streamingUrlHQ=" + streamingUrlHQ
				+ ", streamingUrlMedium=" + streamingUrlMedium
				+ ", information=" + information + ", isBookmarked="
				+ isBookmarked + ", lastPlayedTime=" + lastPlayedTime
				+ ", downloadStatus=" + downloadStatus + ", viewCount="
				+ viewCount + ", likeCount=" + likeCount + ", dislikeCount="
				+ dislikeCount + "]";
	}

	/**
	 * @return the categoryAndFilms
	 */
	public List<CategoryAndFilm> getCategoryAndFilms() {
		return categoryAndFilms;
	}

	/**
	 * @param categoryAndFilms
	 *            the categoryAndFilms to set
	 */
	public void setCategoryAndFilms(List<CategoryAndFilm> categoryAndFilms) {
		this.categoryAndFilms = categoryAndFilms;
	}

	public List<MovieComment> getComments() {
		return comments;
	}

	public void setComments(List<MovieComment> comments) {
		this.comments = comments;
	}

}
