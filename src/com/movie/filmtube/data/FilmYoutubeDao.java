package com.movie.filmtube.data;

import java.util.ArrayList;
import java.util.List;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table FILM_YOUTUBE.
 */
public class FilmYoutubeDao extends AbstractDao<FilmYoutube, Long> {

	public static final String TABLENAME = "FILM_YOUTUBE";

	/**
	 * Properties of entity FilmYoutube.<br/>
	 * Can be used for QueryBuilder and for referencing column names.
	 */
	public static class Properties {
		public final static Property Id = new Property(0, Long.class, "id",
				true, "_id");
		public final static Property YoutubeId = new Property(1, String.class,
				"youtubeId", false, "YOUTUBE_ID");
		public final static Property ServerId = new Property(2, Long.class,
				"serverId", false, "SERVER_ID");
		public final static Property Name = new Property(3, String.class,
				"name", false, "NAME");
		public final static Property StreamingUrlHQ = new Property(4,
				String.class, "streamingUrlHQ", false, "STREAMING_URL_HQ");
		public final static Property StreamingUrlMedium = new Property(5,
				String.class, "streamingUrlMedium", false,
				"STREAMING_URL_MEDIUM");
		public final static Property Information = new Property(6,
				String.class, "information", false, "INFORMATION");
		public final static Property IsBookmarked = new Property(7,
				Boolean.class, "isBookmarked", false, "IS_BOOKMARKED");
		public final static Property IsLocalFilm = new Property(8,
				Boolean.class, "isLocalFilm", false, "IS_LOCAL_FILM");
		public final static Property LastPlayedTime = new Property(9,
				Long.class, "lastPlayedTime", false, "LAST_PLAYED_TIME");
		public final static Property DownloadStatus = new Property(10,
				Integer.class, "downloadStatus", false, "DOWNLOAD_STATUS");
		public final static Property FileSizeInMB = new Property(11,
				Integer.class, "fileSizeInMB", false, "FILE_SIZE_IN_MB");
	};

	public FilmYoutubeDao(DaoConfig config) {
		super(config);
	}

	public FilmYoutubeDao(DaoConfig config, DaoSession daoSession) {
		super(config, daoSession);
	}

	/** Creates the underlying database table. */
	public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
		String constraint = ifNotExists ? "IF NOT EXISTS " : "";
		db.execSQL("CREATE TABLE " + constraint + "'FILM_YOUTUBE' (" + //
				"'_id' INTEGER PRIMARY KEY ," + // 0: id
				"'YOUTUBE_ID' TEXT," + // 1: youtubeId
				"'SERVER_ID' INTEGER," + // 2: serverId
				"'NAME' TEXT," + // 3: name
				"'STREAMING_URL_HQ' TEXT," + // 4: streamingUrlHQ
				"'STREAMING_URL_MEDIUM' TEXT," + // 5: streamingUrlMedium
				"'INFORMATION' TEXT," + // 6: information
				"'IS_BOOKMARKED' INTEGER," + // 7: isBookmarked
				"'IS_LOCAL_FILM' INTEGER," + // 8: isLocalFilm
				"'LAST_PLAYED_TIME' INTEGER," + // 9: lastPlayedTime
				"'DOWNLOAD_STATUS' INTEGER," + // 10: downloadStatus
				"'FILE_SIZE_IN_MB' INTEGER);"); // 11: fileSizeInMB
		// Add Indexes
		db.execSQL("CREATE INDEX " + constraint
				+ "IDX_FILM_YOUTUBE_YOUTUBE_ID ON FILM_YOUTUBE"
				+ " (YOUTUBE_ID);");
	}

	/** Drops the underlying database table. */
	public static void dropTable(SQLiteDatabase db, boolean ifExists) {
		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "")
				+ "'FILM_YOUTUBE'";
		db.execSQL(sql);
	}

	/** @inheritdoc */
	@Override
	protected void bindValues(SQLiteStatement stmt, FilmYoutube entity) {
		stmt.clearBindings();

		Long id = entity.getId();
		if (id != null) {
			stmt.bindLong(1, id);
		}

		String youtubeId = entity.getYoutubeId();
		if (youtubeId != null) {
			stmt.bindString(2, youtubeId);
		}

		Long serverId = entity.getServerId();
		if (serverId != null) {
			stmt.bindLong(3, serverId);
		}

		String name = entity.getName();
		if (name != null) {
			stmt.bindString(4, name);
		}

		String streamingUrlHQ = entity.getStreamingUrlHQ();
		if (streamingUrlHQ != null) {
			stmt.bindString(5, streamingUrlHQ);
		}

		String streamingUrlMedium = entity.getStreamingUrlMedium();
		if (streamingUrlMedium != null) {
			stmt.bindString(6, streamingUrlMedium);
		}

		String information = entity.getInformation();
		if (information != null) {
			stmt.bindString(7, information);
		}

		Boolean isBookmarked = entity.getIsBookmarked();
		if (isBookmarked != null) {
			stmt.bindLong(8, isBookmarked ? 1l : 0l);
		}

		Boolean isLocalFilm = entity.getIsLocalFilm();
		if (isLocalFilm != null) {
			stmt.bindLong(9, isLocalFilm ? 1l : 0l);
		}

		Long lastPlayedTime = entity.getLastPlayedTime();
		if (lastPlayedTime != null) {
			stmt.bindLong(10, lastPlayedTime);
		}

		Integer downloadStatus = entity.getDownloadStatus();
		if (downloadStatus != null) {
			stmt.bindLong(11, downloadStatus);
		}

		Integer fileSizeInMB = entity.getFileSizeInMB();
		if (fileSizeInMB != null) {
			stmt.bindLong(12, fileSizeInMB);
		}
	}

	/** @inheritdoc */
	@Override
	public Long readKey(Cursor cursor, int offset) {
		return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
	}

	/** @inheritdoc */
	@Override
	public FilmYoutube readEntity(Cursor cursor, int offset) {
		FilmYoutube entity = new FilmYoutube(
				//
				cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
				cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // youtubeId
				cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // serverId
				cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
				cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // streamingUrlHQ
				cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // streamingUrlMedium
				cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // information
				cursor.isNull(offset + 7) ? null
						: cursor.getShort(offset + 7) != 0, // isBookmarked
				cursor.isNull(offset + 8) ? null
						: cursor.getShort(offset + 8) != 0, // isLocalFilm
				cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // lastPlayedTime
				cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // downloadStatus
				cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11) // fileSizeInMB
		);
		return entity;
	}

	/** @inheritdoc */
	@Override
	public void readEntity(Cursor cursor, FilmYoutube entity, int offset) {
		entity.setId(cursor.isNull(offset + 0) ? null : cursor
				.getLong(offset + 0));
		entity.setYoutubeId(cursor.isNull(offset + 1) ? null : cursor
				.getString(offset + 1));
		entity.setServerId(cursor.isNull(offset + 2) ? null : cursor
				.getLong(offset + 2));
		entity.setName(cursor.isNull(offset + 3) ? null : cursor
				.getString(offset + 3));
		entity.setStreamingUrlHQ(cursor.isNull(offset + 4) ? null : cursor
				.getString(offset + 4));
		entity.setStreamingUrlMedium(cursor.isNull(offset + 5) ? null : cursor
				.getString(offset + 5));
		entity.setInformation(cursor.isNull(offset + 6) ? null : cursor
				.getString(offset + 6));
		entity.setIsBookmarked(cursor.isNull(offset + 7) ? null : cursor
				.getShort(offset + 7) != 0);
		entity.setIsLocalFilm(cursor.isNull(offset + 8) ? null : cursor
				.getShort(offset + 8) != 0);
		entity.setLastPlayedTime(cursor.isNull(offset + 9) ? null : cursor
				.getLong(offset + 9));
		entity.setDownloadStatus(cursor.isNull(offset + 10) ? null : cursor
				.getInt(offset + 10));
		entity.setFileSizeInMB(cursor.isNull(offset + 11) ? null : cursor
				.getInt(offset + 11));
	}

	/** @inheritdoc */
	@Override
	protected Long updateKeyAfterInsert(FilmYoutube entity, long rowId) {
		entity.setId(rowId);
		return rowId;
	}

	/** @inheritdoc */
	@Override
	public Long getKey(FilmYoutube entity) {
		if (entity != null) {
			return entity.getId();
		} else {
			return null;
		}
	}

	/** @inheritdoc */
	@Override
	protected boolean isEntityUpdateable() {
		return true;
	}

	/**
	 * Reads all available rows from the given cursor and returns a list of new
	 * ImageTO objects.
	 */
	private List<FilmYoutube> loadAllDeepFromCursor(Cursor cursor) {
		int count = cursor.getCount();
		List<FilmYoutube> list = new ArrayList<FilmYoutube>(count);

		if (cursor.moveToFirst()) {
			if (identityScope != null) {
				identityScope.lock();
				identityScope.reserveRoom(count);
			}
			try {
				do {
					FilmYoutube film = getFilmFromCursor(cursor);
					list.add(film);
				} while (cursor.moveToNext());
			} finally {
				if (identityScope != null) {
					identityScope.unlock();
				}
			}
		}
		return list;
	}

	protected List<FilmYoutube> loadAllAndCloseCursor(Cursor cursor) {
		try {
			return loadAllDeepFromCursor(cursor);
		} finally {
			cursor.close();
		}
	}

	public List<FilmYoutube> getJoin(String statement, String[] value) {
		Cursor cursor = db.rawQuery(statement, value);
		return loadAllAndCloseCursor(cursor);
	}

	public List<FilmYoutube> queryRawStatement(String statement) {
		Cursor cursor = db.rawQuery(statement, null);
		return loadAllAndCloseCursor(cursor);
	}

	/**
	 * Get {@link FilmYoutube} in database, based on Video ID.
	 * 
	 * @param videoId
	 * @return {@link FilmYoutube} or <code>null</code>
	 */
	public FilmYoutube getFilmBasedOnVideoId(String videoId) {
		List<FilmYoutube> list = queryBuilder()
				.where(Properties.YoutubeId.eq(videoId)).limit(1).list();
		if (list != null && list.size() > 0) {
			return list.get(0);
		}
		return null;
	}

	/**
	 * Get film from cursor
	 * 
	 * @param cursor
	 * @return
	 */
	public static FilmYoutube getFilmFromCursor(Cursor cursor) {
		FilmYoutube film = new FilmYoutube();
		film.setId(cursor.getLong(cursor
				.getColumnIndex(Properties.Id.columnName)));
		film.setYoutubeId(cursor.getString(cursor
				.getColumnIndex(Properties.YoutubeId.columnName)));
		film.setServerId(cursor.getLong(cursor
				.getColumnIndex(Properties.ServerId.columnName)));
		film.setName(cursor.getString(cursor
				.getColumnIndex(Properties.Name.columnName)));
		film.setStreamingUrlHQ(cursor.getString(cursor
				.getColumnIndex(Properties.StreamingUrlHQ.columnName)));
		film.setStreamingUrlMedium(cursor.getString(cursor
				.getColumnIndex(Properties.StreamingUrlMedium.columnName)));
		film.setInformation(cursor.getString(cursor
				.getColumnIndex(Properties.Information.columnName)));
		film.setIsBookmarked(cursor.getShort(cursor
				.getColumnIndex(Properties.IsBookmarked.columnName)) != 0);
		film.setIsLocalFilm(cursor.getShort(cursor
				.getColumnIndex(Properties.IsLocalFilm.columnName)) != 0);
		film.setLastPlayedTime(cursor.getLong(cursor
				.getColumnIndex(Properties.LastPlayedTime.columnName)));
		film.setDownloadStatus(cursor.getInt(cursor
				.getColumnIndex(Properties.DownloadStatus.columnName)));
		film.setFileSizeInMB(cursor.getInt(cursor
				.getColumnIndex(Properties.FileSizeInMB.columnName)));
		return film;
	}

}
